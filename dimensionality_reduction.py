# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nIXqLAaiYjOZQl6jCRMEsTaFt6l3nRaC
"""

import random
random.seed(999)
print("Dimensions \t Edge points out of 1000")
for dimensions in [200]:
  edge_points = 0
  for p in range(3000):
    on_edge = 0
    for x in range(dimensions):
      if random.random() < 0.01:
        on_edge = 1
    edge_points += on_edge
  print(dimensions, "\t\t", edge_points)

import random, math

random.seed(999)
print("Dimensions \t Avg Distance Between Points")
for dimensions in [50000]:
  total_distance = 0
  for p in range(300):
    dist2 = 0
    for x in range(dimensions):
      dist2 += (random.random() - random.random())**2
    total_distance +=  math.sqrt(dist2)
  formatted_dimensions = "{:,}".format(dimensions)
  print(formatted_dimensions.rjust(9), "\t\t", "{:.2f}".format(total_distance/300.0))

from sklearn.datasets import fetch_openml
import numpy as np

mnist = fetch_openml('mnist_784', as_frame=False, parser="auto")
X_train, y_train = mnist.data[:60_000], mnist.target[:60_000]
X_test, y_test = mnist.data[60_000:], mnist.target[60_000:]

import matplotlib.pyplot as plt

def plot_digit(image_data):
    image = image_data.reshape(28, 28)
    plt.imshow(image, cmap="binary")
    plt.axis("off")

plt.figure(figsize=(4, 4))
for idx, image_data in enumerate(X_train[:16]):
    plt.subplot(4, 4, idx + 1)
    plot_digit(image_data)
plt.subplots_adjust(wspace=0, hspace=0)
plt.show()

from sklearn.decomposition import PCA

pca = PCA()
pca.fit(X_train)
cumsum = np.cumsum(pca.explained_variance_ratio_)
d = np.argmax(cumsum >= 0.99) + 1
print(d)

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import RandomizedSearchCV
from sklearn.pipeline import make_pipeline
from sklearn.metrics import accuracy_score

clf = make_pipeline(PCA(random_state=42),
                    RandomForestClassifier(random_state=42))
param_distrib = {
    "pca__n_components": np.arange(10, 80),
    "randomforestclassifier__n_estimators": np.arange(50, 500)
}
rnd_search = RandomizedSearchCV(clf, param_distrib, n_iter=3, cv=3,
                                random_state=42)
rnd_search.fit(X_train[:3000], y_train[:3000])

print(rnd_search.best_params_)

y_pred = rnd_search.predict(X_test)
accuracy_score = accuracy_score(y_pred,y_test)
print(accuracy_score)

pca = PCA(n_components=23)
X_reduced = pca.fit_transform(X_train, y_train)
X_recovered = pca.inverse_transform(X_reduced)

plt.figure(figsize=(7, 4))
for idx, X in enumerate((X_train[::2100], X_recovered[::2100])):
    plt.subplot(1, 2, idx + 1)
    plt.title(["Original", "Compressed"][idx])
    for row in range(5):
        for col in range(5):
            plt.imshow(X[row * 5 + col].reshape(28, 28), cmap="binary",
                       vmin=0, vmax=255, extent=(row, row + 1, col, col + 1))
            plt.axis([0, 5, 0, 5])
            plt.axis("off")